#include <U8g2lib.h>
#include <SPI.h>
#include <Arduino.h>
// https://github.com/olikraus/u8g2/wiki/u8g2reference#drawstr

#include <EEPROM.h>
// memory ^

#include <Wire.h>
#include <RTClib.h>
// real time clock for AFK
RTC_DS3231 rtc;

// 10, 8, 9, 51, 52, pwr, gnd
U8G2_SSD1309_128X64_NONAME0_1_4W_HW_SPI u8g2_1(U8G2_R0, 10, 8, 9);
U8G2_SSD1309_128X64_NONAME0_1_4W_HW_SPI u8g2_2(U8G2_R0, 5, 3, 4);



//charSprite
const unsigned char sprite [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x06, 0xC0, 0xEC, 0x40, 0xB8, 0x7F, 0x18, 0x70, 0x0C, 0x40, 0x04, 0x40, 0x44, 0x48, 0x06, 0x40, 0x02, 0x20, 0x86, 0x27, 0xC4, 0x30, 0x08, 0x18, 0xF8, 0x0F, 0x00, 0x00
};

const unsigned char coinSprite [] PROGMEM = {
  0x00, 0x10, 0x18, 0x3C, 0x24, 0x22, 0x3E, 0x00
};

bool introPlayed = false;

/**
Create a map of sorts with this that can store a list of numbers that index an
inventory constant to load up an inventory for you from a 'save state'

Test displaying this, need my buttons to move through an inventory

but for now
with the square moving, can store how many coins collected, a store system to upgrade
save the level you are on, coins stored and upgrades purchased in a
upgradesBought = 112112
sort of system
['range', 'speed']
would give 4 range upgrades and 2 speed on load
coin count = 110
110 coins on load


just trying to gather coins *_*).. full of type conversion brokenness and it does not even register a coin being grabbed
*/

struct Vect2 {
  float x;
  float y;
};

struct Coin {
  Vect2 pos;
  Vect2 satCoord[4];
  int id;
};

const int maxCoins = 5;
Coin coins[maxCoins];
int currentCoins = 0;

const int potPin = A0;
int potValue = 0;
int potPos = 0;

int spriteX = 10;
int spriteY = 10;

long totalSnowmanContacts = 0;
long coinsCollected = 0;

int x = 0;
int y = 15;

float xMoveAmount = 0.25;
float xMoveAmountHolder = 0.0;
float yMoveAmount = 0.25;
float yMoveAmountHolder = 0.0;

int ymove = 1;
int xmove = 1;


// Will affect AFK - display a message - TODO
bool powerWasLostToRTC = false;



// CODE
// **********SET UP ********
void setup() {
  Wire.begin();
  rtc.begin();
  Serial.begin(9600);
  u8g2_1.begin();

  u8g2_2.begin();

  EEPROM.get(0, totalSnowmanContacts);

  if (rtc.lostPower()){
    Serial.println("LOST POWER< SETTING DATE");
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    powerWasLostToRTC = true;
  }

}

void loop(void) {

  DateTime moment = rtc.now();
  //moment.year() - 1, DEC; // this works and does direct arithmatic on the value so
  // we can prob calculate AFK this way

  u8g2_1.firstPage();
  do {
    u8g2_1.setFont(u8g2_font_unifont_t_symbols);
    u8g2_1.drawGlyph(x, y, 0x2603);

    xMoveAmountHolder += xMoveAmount;
    yMoveAmountHolder += yMoveAmount;

    //if (xMoveAmountHolder >= 1.00) {
     x += xmove;
     //xMoveAmountHolder = 0.0;
    //}
    //if (yMoveAmountHolder >= 1.00) {
     y += ymove;
     //yMoveAmountHolder = 0.0;
    //}

    bool contactedEdge = false;
    if (x >= 118) {
      xmove *= -1;
      totalSnowmanContacts++;
      contactedEdge = true;
    } else if (x <= -5) {
      xmove *= -1;
      totalSnowmanContacts++;
      contactedEdge = true;
    }
    if (y >= 64) {
      ymove *= -1;
      totalSnowmanContacts++;
      contactedEdge = true;
    } else if (y <= 10) {
      ymove *= -1;
      totalSnowmanContacts++;
      contactedEdge = true;
    }

    if (contactedEdge) {
      EEPROM.put(0, totalSnowmanContacts);
      contactedEdge = false;
    }

    u8g2_1.setFont(u8g2_font_ncenB08_tr);
    u8g2_1.drawStr(22, 8, String(totalSnowmanContacts).c_str());
    u8g2_1.drawStr(90, 8, String(coinsCollected).c_str());
  } while (u8g2_1.nextPage());



  u8g2_2.firstPage();

  int potSum = 0;
  for (int i = 0; i < 15; ++i) {
    potSum += analogRead(potPin);
    delay(8);
  }
  potValue = potSum / 10;
  potPos = map(potValue, 0, 1023, 0, 115);
  // pot position to move an arrow over button selections
  // u8g2_2.drawButtonUTF8(62, 20, U8G2_BTN_BW2, 0,  2,  2, "Btn" );

  spriteX = constrain(potPos, 1, 115);
  int spriteYVal = spriteY;
  if (spriteX <= 2) {
    spriteYVal += 3;
  }
  if (spriteX >= 112) {
    spriteYVal -= 3;
  }
  spriteY = constrain(spriteYVal, 0, 48);
  addCoin(1, 70, 45);
  addCoin(1, 70, 45);
  addCoin(1, 70, 45);
  addCoin(1, 70, 45);
  addCoin(1, 70, 45);
  //addCoin(2, (int)random(5, 58), (int)random(9, 111));
  //addCoin(3, (int)random(3, 58), (int)random(9, 111));
  //addCoin(4, (int)random(5, 57), (int)random(9, 111));
  //addCoin(5, (int)random(3, 55), (int)random(9, 111));

  do {

    u8g2_2.setFont(u8g2_font_ncenB08_tr);
    for (int i = 0; i < currentCoins; ++i) {
      u8g2_2.drawXBMP(coins[i].pos.x, coins[i].pos.y, 8, 8, coinSprite);
    }
    u8g2_2.drawXBMP(spriteX, spriteY, 16, 16, sprite);
    Vect2 playerSpriteSAT[4];
    Vect2* playerCoords = getSpriteSATCoords(spriteX, spriteY, 16, 16);
    for (int p = 0; p < 4; ++p) {
      playerSpriteSAT[p] = playerCoords[p];
    }
    for (int i = 0; i < currentCoins; ++i) {
      if (checkCollision(playerSpriteSAT, 4, coins[i].satCoord, 4, 1.0)) {
        coinsCollected++;
      }
    }
    u8g2_2.drawStr(55, 8, String(spriteX).c_str());
  } while (u8g2_2.nextPage());

  delay(250);
}

Vect2* getSpriteSATCoords(int x, int y, int w, int h) {
  static Vect2 poly1[4] = {
    {x, y}, {(float)x + w, y}, {x, (float)y + h}, {(float)x + w, (float)y + h}
  };
  return poly1;
}



// this is full of syntax errors im sure
//void writeTextArray(U8G2_SSD1309_128X64_NONAME0_1_4W_HW_SPI *u8g2Screen, String[] words) {
  // may need to write from reverse order
  // getting the string descent and setting Y pos of bottom row
  // to screen height - descent - PADDING (prob 1 or 2)
  // then GetAscent() and write the next row above by - that much - PADDING
  //for (int i = words.length - 1; i >= 0; --i) {
    //u8g2Screen.getAscent(words[i]);
  //}
//}




void loadSaveData() {
  loadUpgrades(110); //get upgrade data
  loadCoins();
}

void loadUpgrades(int upgradeList) {

}

void loadCoins() {

}

void addCoin(int id, float x, float y) {
  if (currentCoins < maxCoins) {
    coins[currentCoins].id = id;
    coins[currentCoins].pos.x = x;
    coins[currentCoins].pos.y = y;
    Vect2* coords = getSpriteSATCoords(x, y, 8, 8);
    for (int i = 0; i < 4; ++i) {
      coins[currentCoins].satCoord[i] = coords[i];
//      // TODO: why are the X and Y values all the same here.. the rand seed?
//      Serial.print("X for coin: ");
//      Serial.print(currentCoins);
//      Serial.print(" ");
//      Serial.println(coords[i].x);
//      Serial.print("Y for coin: ");
//      Serial.print(currentCoins);
//      Serial.print(" ");
//      Serial.println(coords[i].y);
    }
    currentCoins++;
  } else {
    for (int i = 0; i < currentCoins; ++i) {
      if (coins[i].id == -1) {
        coins[i].id = (int)random(2000);
        int ranX = (int)random(5, 115);
        int ranY = (int)random(5, 50);
        Vect2* coords = getSpriteSATCoords(x, y, 8, 8);
        for (int c = 0; c < 4; ++c) {
          coins[i].satCoord[c] = coords[c];
        }
        coins[i].pos.x = (float)ranX;
        coins[i].pos.y = (float)ranY;
        break;
      }
    }
  }
}

void removeCoinsById(int id) {
  for (int i = 0; i < currentCoins; ++i) {
    if (coins[i].id == id) {
      coins[i].id = -1;
      break;
    }
  }
}

// Need to see if it can take an int that is moment.year()
// return a value to determine how many instances to calculate for gains..
long calculateAFKGains() {
  return 1;
}


























bool checkCollision(Vect2 arr1[], int size1, Vect2 arr2[], int size2, float contactRadius) {
  for (int i = 0; i < size1; ++i) {
    for (int j = 0; j < size2; ++j) {
      if (distance(arr1[i], arr2[j]) < contactRadius) {
        return true;
      }
    }
  }
  return false;
}

float distance(Vect2 a, Vect2 b) {
  return sqrt(pow(b.x - a.x, 2) + pow(b.y - a.y, 2));
}







// Collision stuff
// Vect2 poly1[] = {{0, 0}, {50, 0}, {50, 50}, {0, 50}};
// Vect2 poly2[] = {{10, 0}, {50, 10}, {50, 60}, {10, 60}};
// bool isColliding = checkSAT(poly1, 4, poly2, 4);


float dotProduct(Vect2 v1, Vect2 v2) {
  return v1.x * v2.x + v1.y * v2.y;
}

Vect2 subtract(Vect2 v1, Vect2 v2) {
  return {v1.x - v2.x, v1.y - v2.y};
}

Vect2 getNormal(Vect2 edge) {
  return {-edge.y, edge.x};
}

void projectPolygon(Vect2 axis, Vect2* vertices, int numVertices, float &mini, float &maxi) {
  mini = dotProduct(vertices[0], axis);
  maxi = mini;

  for (int i = 1; i < numVertices; ++i) {
    float projection = dotProduct(vertices[i], axis);
    if (projection < mini) {
      projection = mini;
    }
    if (projection > maxi) {
      projection = maxi;
    }
  }
}

bool checkSATCollisionNotWorking(Vect2* poly1, int numVertices1, Vect2* poly2, int numVertices2) {
  for (int i = 0; i < numVertices1; ++i) {
    Vect2 v1 = poly1[i];
    Vect2 v2 = poly1[(i + 1) % numVertices1];
    Vect2 edge = subtract(v2, v1);

    Vect2 axis = getNormal(edge);

    float min1, max1, min2, max2;
    projectPolygon(axis, poly1, numVertices1, min1, max1);
    projectPolygon(axis, poly2, numVertices2, min2, max2);

    if (max1 < min2 || max2 < min1) {
      // no collision, separating axis
      return false;
    }
  }

  for (int i = 0; i < numVertices2; ++i) {
    Vect2 v1 = poly2[i];
    Vect2 v2 = poly2[(i + 1) % numVertices2];
    Vect2 edge = subtract(v2, v1);

    Vect2 axis = getNormal(edge);

    float min1, max1, min2, max2;
    projectPolygon(axis, poly1, numVertices1, min1, max1);
    projectPolygon(axis, poly2, numVertices2, min2, max2);

    if (max1 < min2 || max2 < min1) {
      // no collision, separating axis
      return false;
    }
  }
}
